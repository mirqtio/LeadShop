name: Test SSH Connection
on:
  workflow_dispatch:

jobs:
  test-ssh:
    runs-on: ubuntu-latest
    steps:
      - name: Test SSH connection
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          echo "Testing SSH connection to VPS..."
          
          # Check if secrets are set
          echo "Checking secrets..."
          [ -z "$SSH_PRIVATE_KEY" ] && echo "ERROR: SSH_PRIVATE_KEY is not set" && exit 1
          [ -z "$SSH_HOST" ] && echo "ERROR: SSH_HOST is not set" && exit 1
          [ -z "$SSH_PORT" ] && echo "ERROR: SSH_PORT is not set" && exit 1
          [ -z "$SSH_USER" ] && echo "ERROR: SSH_USER is not set" && exit 1
          
          echo "All secrets are set ✓"
          
          # Show connection details (without exposing sensitive data)
          echo "Connecting to: $SSH_USER@$SSH_HOST:$SSH_PORT"
          
          # Setup SSH
          mkdir -p ~/.ssh
          
          # Try multiple SSH key formats
          echo "Testing SSH key formats..."
          
          # Method 1: Direct echo (works if key has actual newlines)
          echo "1. Trying direct echo method..."
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          if ssh-keygen -l -f ~/.ssh/id_rsa 2>/dev/null; then
            echo "✓ Direct echo method works!"
          else
            echo "✗ Direct echo method failed"
            
            # Method 2: Handle escaped newlines
            echo "2. Trying escaped newline conversion..."
            echo "$SSH_PRIVATE_KEY" | sed 's/\\n/\n/g' > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            
            if ssh-keygen -l -f ~/.ssh/id_rsa 2>/dev/null; then
              echo "✓ Escaped newline method works!"
            else
              echo "✗ Escaped newline method failed"
              
              # Method 3: Printf for better formatting
              echo "3. Trying printf method..."
              printf '%s\n' "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
              chmod 600 ~/.ssh/id_rsa
              
              if ssh-keygen -l -f ~/.ssh/id_rsa 2>/dev/null; then
                echo "✓ Printf method works!"
              else
                echo "✗ Printf method failed"
                
                # Method 4: Try base64 decode (in case key is encoded)
                echo "4. Trying base64 decode..."
                if echo "$SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/id_rsa 2>/dev/null; then
                  chmod 600 ~/.ssh/id_rsa
                  
                  if ssh-keygen -l -f ~/.ssh/id_rsa 2>/dev/null; then
                    echo "✓ Base64 decode method works!"
                  else
                    echo "✗ Base64 decode method failed"
                    echo ""
                    echo "=== KEY ANALYSIS ==="
                    echo "Key file size: $(wc -c < ~/.ssh/id_rsa) bytes"
                    echo "Key file lines: $(wc -l < ~/.ssh/id_rsa)"
                    echo "Key starts with: $(head -c 30 ~/.ssh/id_rsa | tr '\n' ' ')"
                    echo "Key ends with: $(tail -c 30 ~/.ssh/id_rsa | tr '\n' ' ')"
                    echo ""
                    echo "ERROR: All SSH key format methods failed!"
                    echo "The SSH private key in GitHub secrets appears to be invalid or corrupted."
                    echo "Please verify the key format and re-add it to GitHub secrets."
                    exit 1
                  fi
                else
                  echo "✗ Base64 decode failed - not base64 encoded"
                  echo ""
                  echo "ERROR: All SSH key format methods failed!"
                  exit 1
                fi
              fi
            fi
          fi
          
          echo "SSH key format is valid ✓"
          echo "Key fingerprint: $(ssh-keygen -l -f ~/.ssh/id_rsa)"
          
          # Add host to known_hosts
          echo "Adding host to known_hosts..."
          ssh-keyscan -p $SSH_PORT $SSH_HOST >> ~/.ssh/known_hosts 2>&1
          
          # Test connection
          echo "Testing SSH connection..."
          ssh -v -p $SSH_PORT $SSH_USER@$SSH_HOST "echo 'SSH connection successful!'"