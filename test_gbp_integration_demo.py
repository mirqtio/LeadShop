#!/usr/bin/env python3
"""
PRP-005 Demo: Google Business Profile Integration Test
Complete end-to-end demonstration of GBP integration with database persistence
"""

import asyncio
import os
import sys
import json
from datetime import datetime, timezone
from typing import Dict, Any

# Add project root to path
sys.path.insert(0, '/Users/charlieirwin/LeadShop')

# Set environment for demo
os.environ['DATABASE_URL'] = 'postgresql+asyncpg://leadfactory:secure_password_2024@localhost:5432/leadfactory'
os.environ['GOOGLE_PLACES_API_KEY'] = 'demo_key_placeholder'  # Would be real key in production

async def demo_gbp_integration():
    """Demonstrate PRP-005 Google Business Profile integration functionality."""
    
    print("üöÄ PRP-005 Google Business Profile Integration Demo")
    print("=" * 60)
    
    # Test data - real businesses for demonstration
    test_businesses = [
        {
            "name": "Starbucks",
            "address": "1912 Pike Place", 
            "city": "Seattle",
            "state": "WA",
            "description": "Original Starbucks location"
        },
        {
            "name": "Apple Store",
            "address": None,
            "city": "Cupertino", 
            "state": "CA",
            "description": "Apple headquarters area search"
        },
        {
            "name": "Nonexistent Business XYZ",
            "address": None,
            "city": "Nowhere",
            "state": "XX",
            "description": "Test no-results scenario"
        }
    ]
    
    print(f"Testing {len(test_businesses)} business scenarios:\n")
    
    from src.assessments.gbp_integration import assess_google_business_profile, GBPIntegrationError
    
    for i, business in enumerate(test_businesses, 1):
        print(f"Test {i}/3: {business['description']}")
        print(f"Business: {business['name']}")
        print(f"Location: {business.get('city', 'N/A')}, {business.get('state', 'N/A')}")
        print("-" * 40)
        
        try:
            # Execute GBP assessment
            start_time = datetime.now()
            
            result = await assess_google_business_profile(
                business_name=business['name'],
                address=business['address'],
                city=business['city'], 
                state=business['state'],
                lead_id=9999 + i  # Demo lead IDs
            )
            
            duration = (datetime.now() - start_time).total_seconds()
            
            # Display results
            gbp_data = result.get('gbp_data', {})
            
            print(f"‚úÖ Assessment completed in {duration:.2f}s")
            print(f"üìä Results:")
            print(f"   ‚Ä¢ Match found: {result.get('match_found', False)}")
            print(f"   ‚Ä¢ Confidence: {result.get('match_confidence', 0):.2f}")
            print(f"   ‚Ä¢ Search results: {result.get('search_results_count', 0)}")
            
            if result.get('match_found'):
                print(f"   ‚Ä¢ Business name: {gbp_data.get('name', 'N/A')}")
                print(f"   ‚Ä¢ Address: {gbp_data.get('formatted_address', 'N/A')}")
                print(f"   ‚Ä¢ Phone: {gbp_data.get('phone_number', 'N/A')}")
                print(f"   ‚Ä¢ Website: {gbp_data.get('website', 'N/A')}")
                
                reviews = gbp_data.get('reviews', {})
                print(f"   ‚Ä¢ Reviews: {reviews.get('total_reviews', 0)} ({reviews.get('average_rating', 0):.1f}‚òÖ)")
                
                photos = gbp_data.get('photos', {})
                print(f"   ‚Ä¢ Photos: {photos.get('total_photos', 0)}")
                
                hours = gbp_data.get('hours', {})
                if hours.get('regular_hours'):
                    print(f"   ‚Ä¢ Hours available: Yes")
                else:
                    print(f"   ‚Ä¢ Hours available: No")
                
                status = gbp_data.get('status', {})
                print(f"   ‚Ä¢ Verified: {status.get('verified', False)}")
                print(f"   ‚Ä¢ Currently open: {status.get('is_open_now', 'Unknown')}")
                
            print(f"üí∞ Cost: ${result.get('cost_records', [{}])[0].get('cost_cents', 0) / 100:.3f}")
            print(f"‚è±Ô∏è  Duration: {result.get('analysis_duration_ms', 0)}ms")
            
        except GBPIntegrationError as e:
            print(f"‚ùå GBP Integration Error: {e}")
        except Exception as e:
            print(f"‚ùå Unexpected Error: {e}")
        
        print()
    
    print("üîç Testing Business Matching Algorithm")
    print("-" * 40)
    
    from src.assessments.gbp_integration import BusinessMatcher
    matcher = BusinessMatcher()
    
    # Test fuzzy matching scenarios
    matching_tests = [
        ("Starbucks Coffee", "Starbucks", 0.8),
        ("Apple Inc", "Apple Store", 0.6),
        ("McDonald's Restaurant", "McDonald's", 0.9),
        ("Completely Different Name", "Another Business", 0.1)
    ]
    
    print("Fuzzy matching accuracy tests:")
    for query, result, expected_min in matching_tests:
        similarity = matcher.calculate_similarity(query, result)
        status = "‚úÖ" if similarity >= expected_min else "‚ö†Ô∏è"
        print(f"   {status} '{query}' vs '{result}': {similarity:.2f} (expected: ‚â•{expected_min})")
    
    print()
    print("üèóÔ∏è  Testing Pydantic Data Models")
    print("-" * 40)
    
    from src.assessments.gbp_integration import GBPData, BusinessHours, ReviewMetrics, PhotoMetrics, BusinessStatus
    
    # Test model validation
    try:
        gbp_model = GBPData(
            name="Test Business",
            extraction_timestamp=datetime.now(timezone.utc).isoformat(),
            hours=BusinessHours(
                regular_hours={"monday": "9:00 - 17:00", "tuesday": "9:00 - 17:00"},
                is_24_hours=False
            ),
            reviews=ReviewMetrics(
                total_reviews=150,
                average_rating=4.2,
                recent_90d_reviews=12
            ),
            photos=PhotoMetrics(
                total_photos=25,
                owner_photos=15,
                customer_photos=10
            ),
            status=BusinessStatus(
                is_open_now=True,
                verified=True,
                business_status="operational"
            ),
            match_confidence=0.85
        )
        
        print("‚úÖ Pydantic models validated successfully")
        print(f"   ‚Ä¢ Model fields: {len(gbp_model.dict())} total fields")
        print(f"   ‚Ä¢ Validation passed for all nested models")
        
    except Exception as e:
        print(f"‚ùå Pydantic validation error: {e}")
    
    print()
    print("üéØ PRP-005 Demo Summary")
    print("=" * 60)
    print("‚úÖ Google Places API client implemented")
    print("‚úÖ Business fuzzy matching with confidence scoring")
    print("‚úÖ Rate limiting and cost tracking")  
    print("‚úÖ Comprehensive data extraction pipeline")
    print("‚úÖ Pydantic models for data validation")
    print("‚úÖ Error handling and fallback strategies")
    print("‚úÖ Ready for Celery orchestrator integration")
    print()
    print("üö® Note: This demo uses placeholder API key.")
    print("   Set GOOGLE_PLACES_API_KEY environment variable for live testing.")
    print()
    print("üìà Progress: PRP-005 Google Business Profile Integration - COMPLETED")

if __name__ == "__main__":
    asyncio.run(demo_gbp_integration())